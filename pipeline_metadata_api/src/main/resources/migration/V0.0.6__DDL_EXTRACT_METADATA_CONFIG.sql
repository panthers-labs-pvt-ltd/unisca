create sequence if not exists dataframe_seq  as integer;
ALTER SEQUENCE dataframe_seq RESTART WITH 1;
DROP TABLE IF EXISTS EXTRACT_METADATA_CONFIG CASCADE;

CREATE TABLE IF NOT EXISTS EXTRACT_METADATA_CONFIG (
 -- EXTRACT_ID UUID DEFAULT GEN_RANDOM_UUID() PRIMARY KEY,
	PIPELINE_NAME 				VARCHAR(500),
	SEQUENCE_NUMBER 			INTEGER NOT NULL,
	EXTRACT_SOURCE_TYPE 		VARCHAR(255) NOT NULL,
	EXTRACT_SOURCE_SUB_TYPE 	VARCHAR(255) NOT NULL,
	DATAFRAME_NAME 				VARCHAR(255) DEFAULT ('DF_'::text ||
										((nextval('dataframe_seq'::regclass))::CHARACTER VARYING)::text),
	SOURCE_CONFIGURATION 		TEXT,
	PREDECESSOR_SEQUENCES 		VARCHAR(100),
	SUCCESSOR_SEQUENCES 		VARCHAR(100),
	ROW_FILTER 					TEXT,
  	COLUMN_FILTER 				TEXT,
	DATA_SOURCE_CONNECTION_NAME	VARCHAR(255),
	CREATED_TIMESTAMP 			TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CREATED_BY 					VARCHAR(255) DEFAULT CURRENT_USER,
	UPDATED_TIMESTAMP 			TIMESTAMP NULL,
	UPDATED_BY 					VARCHAR(255) NULL,
	ACTIVE_FLAG 				VARCHAR(1) DEFAULT 'Y'::CHARACTER VARYING,
	CONSTRAINT PK_EXTRACT_METADATA_CONFIG UNIQUE (PIPELINE_NAME, SEQUENCE_NUMBER),
	CONSTRAINT CHECK_EXTRACT_METADATA_CONFIG_ACTIVE_FLAG CHECK (ACTIVE_FLAG IN ('Y', 'N')),
	CONSTRAINT FK_PIPELINE_ID FOREIGN KEY (PIPELINE_NAME) REFERENCES DATA_PIPELINES(PIPELINE_NAME) ON DELETE CASCADE ON UPDATE CASCADE,
	CONSTRAINT FK_DATA_SOURCE FOREIGN KEY (EXTRACT_SOURCE_TYPE, EXTRACT_SOURCE_SUB_TYPE) REFERENCES DATA_SOURCES(DATA_SOURCE_TYPE, DATA_SOURCE_SUB_TYPE) ON DELETE CASCADE ON UPDATE CASCADE
);

select * FROM extract_metadata_config;

INSERT INTO EXTRACT_METADATA_CONFIG (PIPELINE_NAME, SEQUENCE_NUMBER, EXTRACT_SOURCE_TYPE, EXTRACT_SOURCE_SUB_TYPE, PREDECESSOR_SEQUENCES, SUCCESSOR_SEQUENCES, ROW_FILTER, COLUMN_FILTER, CREATED_BY, UPDATED_BY) VALUES 
('Test_Pipeline', 1, 'Files', 'Csv', '0', '2', 'ROWNUM < 100', 'COL1, COL2', 'admin', 'admin');
TRUNCATE TABLE EXTRACT_METADATA_CONFIG;
