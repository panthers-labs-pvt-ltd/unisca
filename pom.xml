<?xml version="1.0" encoding="UTF-8"?>
<project
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://maven.apache.org/POM/4.0.0"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.panthers.labs.chimera</groupId>
    <artifactId>unisca</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <developers>
        <developer>
            <id>0001</id>
            <name>Kumar, Manish</name>
            <email>manish.kumar.gupta@outlook.com</email>
        </developer>
        <developer>
            <id>0002</id>
            <name>Mohit Ranjan</name>
            <email>manish.kumar.gupta@outlook.com</email>
        </developer>
        <developer>
            <id>0003</id>
            <name>Prashant Kumar</name>
            <email>manish.kumar.gupta@outlook.com</email>
        </developer>
        <developer>
            <id>0004</id>
            <name>Vivek</name>
            <email>manish.kumar.gupta@outlook.com</email>
        </developer>
        <developer>
            <id>0005</id>
            <name>Abhinav</name>
            <email>manish.kumar.gupta@outlook.com</email>
        </developer>
    </developers>
    <inceptionYear>2024</inceptionYear>
    <name>Unisca - Data Engineering</name>
    <description>Unisca is the foundational-shared module of the Chimera Framework. It encapsulates common functionalities and reusable components that are used across all Chimera services and modules. By centralizing these utilities, Unisca ensures consistency, reduces duplication, and promotes a modular and maintainable architecture.</description>

    <modules>
        <module>utilities</module>
        <module>exception</module>
        <module>logging</module>
        <module>kvstore</module>
        <module>tags</module>
    </modules>


    <properties>
        <!-- Chimera version -->
        <chimera.project.version>1.0-SNAPSHOT</chimera.project.version>
        <!-- Compilation Option -->
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <maven.compiler.release>17</maven.compiler.release>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- Recovery dependencies -->
        <apache.httpcomponents.httpcore.version>4.4.14</apache.httpcomponents.httpcore.version>
        <apache.httpcomponents.httpclient.version>4.5.14</apache.httpcomponents.httpclient.version>

        <!-- testing -->
        <junit.version>5.9.1</junit.version>
        <scalatest.version>3.2.17</scalatest.version>
        <junit.jupiter.version>5.10.0</junit.jupiter.version>
        <mockito.inline.version>5.14.2</mockito.inline.version>
        <mockito-junit-jupiter.version>5.14.2</mockito-junit-jupiter.version>
        <mockito-core.version>5.14.2</mockito-core.version>

        <!-- Build configurations -->
        <maven.scala.plugin.version>4.7.2</maven.scala.plugin.version>
        <maven.assembly-plugin.version>3.4.2</maven.assembly-plugin.version>
        <maven.compiler.plugin.version>3.11.0</maven.compiler.plugin.version>
        <checkstyle-maven-plugin.version>3.0.0</checkstyle-maven-plugin.version>
        <scalatest.maven.plugin.version>2.2.0</scalatest.maven.plugin.version>

        <!-- Sonar and jacoco Option -->
        <!-- Jacoco is code coverage reports generator for Java projects -->
        <!-- Sonar helps with clean code practices -->
        <jacoco.version>0.8.4</jacoco.version>
        <jacoco.coveredratio>0</jacoco.coveredratio>
        <!-- Covered Ration is Set to 0 once Sonar Fixes are done we can reset -->
        <sonar.core.codeCoveragePlugin>jacoco</sonar.core.codeCoveragePlugin>
        <sonar.exclusions>target</sonar.exclusions>
        <jacoco-maven-plugin_version>0.8.9</jacoco-maven-plugin_version>
        <sonar-maven-plugin_version>3.9.1.2184</sonar-maven-plugin_version>

        <!-- Email version -->
        <javax.mail.version>1.6.2</javax.mail.version>

        <!-- Scala -->
        <scala.major.version>2.12</scala.major.version>
        <scala.minor.version>16</scala.minor.version>
        <scala.version>${scala.major.version}.${scala.minor.version}</scala.version>

        <!-- Spark and its dependencies -->
        <spark.version>3.5.4</spark.version>
        <spark.scala.version>2.12</spark.scala.version>
        <spark.kafka.sql.version>0-10</spark.kafka.sql.version>
        <hadoop.version>3.3.3</hadoop.version>
        <jersey-container-servlet-core_version>2.34</jersey-container-servlet-core_version>
        <javax.servlet-api_version>4.0.1</javax.servlet-api_version>
        <iceberg-spark-runtime-3.5-version>1.7.1</iceberg-spark-runtime-3.5-version>
        <comet-spark-spark3.5-version>0.5.0</comet-spark-spark3.5-version>

        <!-- Logging, Monitoring and DQ -->
        <log4j.api.version>2.20.0</log4j.api.version>
        <slf4j-api.version>2.0.9</slf4j-api.version>
        <spline.agent.version>1.0.4</spline.agent.version>

        <!-- Key dependencies -->
        <kafka.clients.version>3.1.0</kafka.clients.version>
        <aws.java.sdk2.version>2.26.16</aws.java.sdk2.version>

        <!-- Helper and utility dependencies -->
        <google.guava.version>31.1-jre</google.guava.version>
        <snake.yaml.version>1.33</snake.yaml.version>
        <lombok.version>1.18.36</lombok.version>
        <org.mapstruct.version>1.6.3</org.mapstruct.version>
        <json.simple.version>1.1.1</json.simple.version>
        <code.gson.version>2.9.0</code.gson.version>
        <commons-text.version>1.10.0</commons-text.version>
        <commons-csv.version>1.9.0</commons-csv.version>
        <antlr4.version>4.9.3</antlr4.version>
        <!-- Spring Boot versions -->
        <spring-boot.version>3.4.1</spring-boot.version>
        <!-- Spring Cloud versions -->
        <spring-cloud.version>2024.0.0</spring-cloud.version>

        <!-- Flyway version -->
        <flyway-maven-plugin-version>11.3.2</flyway-maven-plugin-version>
        <flyway-database-postgresql-version>11.3.2</flyway-database-postgresql-version>
    </properties>
    <!--<repositories><repository><id>gitlab-maven</id><url>https://gitlab.com/manishkumargupta/TestScala.git</url></repository></repositories><distributionManagement><repository><id>gitlab-maven</id><url>https://gitlab.com/manishkumargupta/TestScala.git</url></repository><snapshotRepository><id>gitlab-maven</id><url>https://gitlab.com/manishkumargupta/TestScala.git</url></snapshotRepository></distributionManagement>-->
    <repositories>
        <repository>
            <id>github</id>
            <name>GitHub Packages</name>
            <url>https://maven.pkg.github.com/panthers-labs-pvt-ltd/progressive.mind.framework</url>
        </repository>
    </repositories>


    <distributionManagement>
        <repository>
            <id>github</id>
            <name>GitHub Packages Release Repository</name>
            <url>https://maven.pkg.github.com/panthers-labs-pvt-ltd/progressive.mind.framework</url>
        </repository>

        <snapshotRepository>
            <id>github</id>
            <name>GitHub Packages Snapshot Repository</name>
            <url>https://maven.pkg.github.com/panthers-labs-pvt-ltd/progressive.mind.framework</url>
        </snapshotRepository>
    </distributionManagement>


    <dependencyManagement>
        <dependencies>
            <!-- AWS SDK for Java 2.x BOM -->
            <dependency>
                <groupId>software.amazon.awssdk</groupId>
                <artifactId>bom</artifactId>
                <version>${aws.java.sdk2.version}</version> <!-- Use the latest version -->
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- Import Spring Boot BOM- Inheriting was wrong since it was not needed for non-spring boot modules-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- Spring Cloud Dependencies BOM -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest_${scala.major.version}</artifactId>
                <version>${scalatest.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- https://mvnrepository.com/artifact/org.zalando/spark-json-schema -->
            <dependency>
                <groupId>org.zalando</groupId>
                <artifactId>spark-json-schema_2.12</artifactId>
                <version>0.6.3</version>
            </dependency>

            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-library</artifactId>
                <version>${scala.major.version}.${scala.minor.version}</version>
            </dependency>
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-compiler</artifactId>
                <version>${scala.major.version}.${scala.minor.version}</version>
            </dependency>
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-reflect</artifactId>
                <version>${scala.major.version}.${scala.minor.version}</version>
            </dependency>

            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter</artifactId>
                <version>${junit.jupiter.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>${mockito-core.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-junit-jupiter</artifactId>
                <version>${mockito-junit-jupiter.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.zaxxer</groupId>
                <artifactId>HikariCP</artifactId>
                <version>5.0.1</version> <!-- Use the latest version -->
            </dependency>
            <dependency>
                <groupId>software.amazon.awssdk</groupId>
                <artifactId>secretsmanager</artifactId>
                <version>${aws.java.sdk2.version}</version>
            </dependency>
            <dependency>
                <groupId>org.antlr</groupId>
                <artifactId>antlr4</artifactId>
                <version>${antlr4.version}</version>
            </dependency>
            <dependency>
                <groupId>org.antlr</groupId>
                <artifactId>antlr4-runtime</artifactId>
                <version>${antlr4.version}</version>
            </dependency>

            <!-- https://mvnrepository.com/artifact/ch.cern.sparkmeasure/spark-measure -->
            <dependency>
                <groupId>ch.cern.sparkmeasure</groupId>
                <artifactId>spark-measure_${spark.scala.version}</artifactId>
                <version>0.24</version>
            </dependency>

            <!-- Spark -->
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-streaming_${spark.scala.version}</artifactId>
                <version>${spark.version}</version>
            </dependency>
            <!-- Spark Core -->
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-core_${spark.scala.version}</artifactId>
                <version>${spark.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.slf4j</groupId>
                        <artifactId>slf4j-log4j12</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-sql_${spark.scala.version}</artifactId>
                <version>${spark.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-avro_${spark.scala.version}</artifactId>
                <version>${spark.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-token-provider-kafka-0-10_${spark.scala.version}</artifactId>
                <version>${spark.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-sql-kafka-0-10_${spark.scala.version}</artifactId>
                <version>${spark.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
            <!-- Abhinav. Needed to add this to avoid  java.lang.NoClassDefFoundError: javax/servlet/http/HttpServlet error -->
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>${javax.servlet-api_version}</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jersey.containers</groupId>
                <artifactId>jersey-container-servlet-core</artifactId>
                <version>${jersey-container-servlet-core_version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-spark-runtime-3.5 -->
            <dependency>
                <groupId>org.apache.iceberg</groupId>
                <artifactId>iceberg-spark-runtime-3.5_2.12</artifactId>
                <version>${iceberg-spark-runtime-3.5-version}</version>
            </dependency>
            <!-- Apache Comet libraries -->
            <!-- https://mvnrepository.com/artifact/com.ebiznext/comet-spark3 -->
            <!-- https://mvnrepository.com/artifact/org.apache.datafusion/comet-spark-integration-spark3.5 -->
            <!-- https://mvnrepository.com/artifact/org.apache.datafusion/comet-spark-integration-spark3.5 -->
            <dependency>
                <groupId>org.apache.datafusion</groupId>
                <artifactId>comet-spark-spark3.5_${spark.scala.version}</artifactId>
                <version>${comet-spark-spark3.5-version}</version>
            </dependency>
            <!-- Logging -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j-api.version}</version> <!-- Example latest -->
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-simple</artifactId> <!-- Or your chosen binding -->
                <version>${slf4j-api.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${log4j.api.version}</version> <!-- Use the latest version -->
            </dependency>
            <!-- Log4j API -->
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>
                <version>${log4j.api.version}</version> <!-- Use the latest version -->
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-layout-template-json</artifactId>
                <version>${log4j.api.version}</version>
            </dependency>

            <!-- https://mvnrepository.com/artifact/org.yaml/snakeyaml -->
            <dependency>
                <groupId>org.yaml</groupId>
                <artifactId>snakeyaml</artifactId>
                <version>2.3</version>
            </dependency>

            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>42.7.4</version>
            </dependency>
            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-metrics-prometheus</artifactId>
                <version>1.17.1</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>2.15.2</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.module</groupId>
                <artifactId>jackson-module-scala_2.12</artifactId> <!-- Or _2.13 if using Scala 2.13 -->
                <version>2.15.2</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.dataformat</groupId>
                <artifactId>jackson-dataformat-csv</artifactId>
                <version>2.3.0</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>2.15.2</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>2.15.2</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.dataformat</groupId>
                <artifactId>jackson-dataformat-yaml</artifactId>
                <version>2.15.2</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml</groupId>
                <artifactId>classmate</artifactId>
                <version>1.3.0</version>
            </dependency>
            <dependency>
                <groupId>org.apache.maven.shared</groupId>
                <artifactId>maven-invoker</artifactId>
                <version>3.0.1</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.json/json -->
            <dependency>
                <groupId>org.json</groupId>
                <artifactId>json</artifactId>
                <version>20240303</version>
            </dependency>

            <dependency>
                <groupId>com.progressive.minds.chimera</groupId>
                <artifactId>common</artifactId>
                <version>${project.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.17.0</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>${sonar-maven-plugin_version}</version>
            </plugin>
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>${maven.scala.plugin.version}</version>
                <configuration>
                    <scalaCompatVersion>${scala.major.version}</scalaCompatVersion>
                    <scalaVersion>${scala.version}</scalaVersion>
                </configuration>
                <executions>
                    <execution>
                        <id>compile</id>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                        <phase>compile</phase>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <goals>
                            <goal>testCompile</goal>
                        </goals>
                        <phase>test-compile</phase>
                    </execution>
                    <execution>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco-maven-plugin_version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler.plugin.version}</version>
                <configuration>
                    <release>${maven.compiler.release}</release>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <!-- Testing -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M7</version>
                <configuration>
                    <argLine>
                        -XX:+IgnoreUnrecognizedVMOptions
                        --add-modules jdk.incubator.vector
                        --add-opens=java.base/java.lang=ALL-UNNAMED
                        --add-opens=java.base/java.lang.invoke=ALL-UNNAMED
                        --add-opens=java.base/java.lang.reflect=ALL-UNNAMED
                        --add-opens=java.base/java.io=ALL-UNNAMED
                        --add-opens=java.base/java.net=ALL-UNNAMED
                        --add-opens=java.base/java.nio=ALL-UNNAMED
                        --add-opens=java.base/java.util=ALL-UNNAMED
                        --add-opens=java.base/java.util.concurrent=ALL-UNNAMED
                        --add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED
                        --add-opens=java.base/jdk.internal.ref=ALL-UNNAMED
                        --add-opens=java.base/sun.nio.ch=ALL-UNNAMED
                        --add-opens=java.base/sun.nio.cs=ALL-UNNAMED
                        --add-opens=java.base/sun.security.action=ALL-UNNAMED
                        --add-opens=java.base/sun.util.calendar=ALL-UNNAMED
                        --add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED
                        -Djdk.reflect.useDirectMethodHandle=false
                        -Dio.netty.tryReflectionSetAccessible=true
                        -Xmx1024m
                    </argLine>
                </configuration>
            </plugin>
            <!--            <plugin>
                            <groupId>org.scalatest</groupId>
                            <artifactId>scalatest-maven-plugin</artifactId>
                            <version>${scalatest.maven.plugin.version}</version>
                            <configuration>
                                <stdout>F</stdout>
                                <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
                                <junitxml>.</junitxml>
                                <filereports>WDF TestSuite.txt</filereports>
                                <argLine>
                                    -XX:+IgnoreUnrecognizedVMOptions
                                    &#45;&#45;add-modules jdk.incubator.vector
                                    &#45;&#45;add-opens=java.base/java.lang=ALL-UNNAMED
                                    &#45;&#45;add-opens=java.base/java.lang.invoke=ALL-UNNAMED
                                    &#45;&#45;add-opens=java.base/java.lang.reflect=ALL-UNNAMED
                                    &#45;&#45;add-opens=java.base/java.io=ALL-UNNAMED
                                    &#45;&#45;add-opens=java.base/java.net=ALL-UNNAMED
                                    &#45;&#45;add-opens=java.base/java.nio=ALL-UNNAMED
                                    &#45;&#45;add-opens=java.base/java.util=ALL-UNNAMED
                                    &#45;&#45;add-opens=java.base/java.util.concurrent=ALL-UNNAMED
                                    &#45;&#45;add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED
                                    &#45;&#45;add-opens=java.base/jdk.internal.ref=ALL-UNNAMED
                                    &#45;&#45;add-opens=java.base/sun.nio.ch=ALL-UNNAMED
                                    &#45;&#45;add-opens=java.base/sun.nio.cs=ALL-UNNAMED
                                    &#45;&#45;add-opens=java.base/sun.security.action=ALL-UNNAMED
                                    &#45;&#45;add-opens=java.base/sun.util.calendar=ALL-UNNAMED
                                    &#45;&#45;add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED
                                    -Djdk.reflect.useDirectMethodHandle=false
                                    -Dio.netty.tryReflectionSetAccessible=true
                                    -Xmx1024m
                                </argLine>
                            </configuration>
                            <executions>
                                <execution>
                                    <id>test</id>
                                    <goals>
                                        <goal>test</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>-->
            <!-- enforcers -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M2</version>
                <executions>
                    <execution>
                        <id>enforce</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <banDuplicatePomDependencyVersions/>
                                <requireJavaVersion>
                                    <version>17</version>
                                    <message>Invalid Java version. It should be 17</message>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>